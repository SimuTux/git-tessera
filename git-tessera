#!/usr/bin/env python

from sys import argv, stdin, stdout, stderr, exit
from subprocess import check_output, Popen
import os
import shutil
import stat
import re
import git
from uuid import uuid1

from colorful import colorful

def cmp_tessera(a, b):
  aa = os.lstat("%s/tessera"%a)
  bb = os.lstat("%s/tessera"%b)
  return aa.st_mtime < bb.st_mtime

class Tessera:
  def __init__(self, tessera_path):
    self.tessera_path = tessera_path
    self.filename = "%s/tessera"%tessera_path
    self.title = None
    self._read()

  def _read(self):
    if not os.path.exists(self.filename):
      stderr.write("tessera file not found: %s\n"%self.fielname)
      return None

    f = open(self.filename, 'r')
    self.body = f.read().split('\n')
    f.close()

  def show_short(self):
    print self.get_ident_short(), colorful.bold_white(self.get_title())

  def get_ident(self ):
    return os.path.basename(self.tessera_path)

  def get_ident_short(self):
    return self.get_ident().split('-')[0]

  def get_title(self):
    if self.title:
      return self.title
    self.title = "no title"
    for i in range(len(self.body)):
      if self.body[i].startswith("# "):
        self.title = self.body[i][2:]
        self.body.pop(i)
        break
    return self.title

  def get_body(self):
    return '\n'.join(self.body)


class GitTessera:

  def __init__(self):
    self.git = git.Repo(".")

    self.tesserae = "%s/.tesserae"%self.git.working_dir


  def cmd_init(self, args):
    if len(args) != 0:
      stderr.write("git tessera init takes no arguments\n")
      return False
    if os.path.exists(self.tesserae):
      stderr.write("git tesserae directory exists: %s\n"%self.tesserae)
      return False
    os.mkdir(self.tesserae)
    template = "%s/template"%self.tesserae
    shutil.copyfile("%s/template"%os.path.dirname(os.path.realpath(__file__)), template)
    self.git.index.add([template])
    self.git.index.commit("tessera: initialized")
    return True


  def cmd_ls(self, args):
    contents = [ self.tesserae + "/" + x for x in os.listdir(self.tesserae) if stat.S_ISDIR(os.lstat(self.tesserae + "/" + x).st_mode)]
    sorted(contents, cmp = cmp_tessera)
    for tessera_path in contents:
      t = Tessera(tessera_path)
      t.show_short()
    return True


  def cmd_show(self, args):
    if len(args) != 1:
      stderr.write("git tessera show takes identifier as argument\n")
      return False

    key = args[0]
    tessera_file = None
    for i in os.listdir(self.tesserae):
      tessera_path = "%s/%s"%(self.tesserae, i)
      if not stat.S_ISDIR(os.lstat(tessera_path).st_mode):
        continue
      if i.split('-')[0] == key or i == key:
        break
    if not tessera_path:
      stderr.write("git tessera %s not found\n"%key)
      return False

    t = Tessera(tessera_path)
    ident_short = t.get_ident_short()
    title = t.get_title()
    length = len(ident_short) + len(title) + 2
    print "=" * length
    print ident_short, colorful.bold_white(title)
    print "=" * length
    print
    print t.get_body()
    print
    return True


  def cmd_edit(self, args):
    if len(args) < 1:
      stderr.write("git tessera edit takes one or more identifier as argument\n")
      return False

    if self.git.is_dirty():
      stderr.write("repo is dirty\n")
      return False

    tessera_paths = []
    tessera_files = []
    for key in args:
      tessera_path = None
      tessera_file = None
      for i in os.listdir(self.tesserae):
        tessera_path = "%s/%s"%(self.tesserae, i)
        if not stat.S_ISDIR(os.lstat(tessera_path).st_mode):
          continue
        if i.split('-')[0] == key or i == key:
          tessera_file = "%s/tessera"%tessera_path
          break
      if not tessera_file:
        stder.write("git tessera %s not found\n"%key)
        return False

      tessera_paths.append(tessera_path)
      tessera_files.append(tessera_file)

    p = Popen( ["sensible-editor"] + tessera_files )
    p.communicate( )
    p.wait()

    for tessera_path in tessera_paths:
      t = Tessera(tessera_path)
      title = t.get_title()
      self.git.index.add([tessera_file])
      self.git.index.commit("tessera updated: %s"%title)
    return True

  def cmd_create(self, args):
    if len(args) < 1:
      stderr.write("git tessera create needs arguments\n")
      return False

    if self.git.is_dirty():
      stderr.write("repo is dirty\n")
      return False

    if args:
      title = " ".join(args)
    else:
      title = "tessera title goes here"
    uuid = uuid1()
    tessera_path = "%s/%s"%(self.tesserae, uuid)
    tessera_file = "%s/tessera"%tessera_path
    os.mkdir(tessera_path)
    fin = open("%s/template"%self.tesserae, "r")
    fout = open(tessera_file, "w")
    for line in fin.readlines( ):
      if line == "@title@\n":
        line = "# %s\n"%title
      fout.write(line)
    fin.close()
    fout.close()

    p = Popen( ["sensible-editor", tessera_file])
    p.communicate( )
    p.wait()

    t = Tessera(tessera_path)
    title = t.get_title()

    self.git.index.add([tessera_file])
    self.git.index.commit("new tessera: %s"%title)
    return True

  def cmd_remove(self, args):
    if len(args) != 1:
      stderr.write("git tessera remove takes identifier as argument\n")
      return False

    key = args[0]
    tessera_file = None
    tessera_path = None
    for i in os.listdir(self.tesserae):
      tessera_path = "%s/%s"%(self.tesserae, i)
      if not stat.S_ISDIR(os.lstat(tessera_path).st_mode):
        continue
      if i.split('-')[0] == key or i == key:
        tessera_file = "%s/tessera"%tessera_path
        break
    if not tessera_file:
      stderr.write("git tessera %s not found\n"%key)
      return False

    t = Tessera(tessera_path)
    title = t.get_title()

    stdout.write("remove tessera %s: %s ? [Y/n] "%(key, title))
    try:
      answer = stdin.readline().strip()
    except KeyboardInterrupt:
      return False
    if not answer or answer.lower() == "y":
      from shutil import rmtree
      rmtree(tessera_path)

      self.git.index.remove([tessera_path], r = True)
      self.git.index.commit("tessera removed: %s"%title)




if __name__ == "__main__":
  cmd = "ls"
  if len(argv) > 1:
    cmd = argv[1]

  try:
    t = GitTessera()
  except git.exc.InvalidGitRepositoryError:
    stderr.write("not a git repo\n")
    exit(1)
  if hasattr(t, "cmd_%s"%cmd):
    if not getattr(t, "cmd_%s"%cmd)(argv[2:]):
      exit( 1 )
    exit( 0 )
  else:
    stderr.write("unknown command: %s\n"%cmd)
    exit(2)



